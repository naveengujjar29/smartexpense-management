openapi: 3.0.1
info:
  title: SmartExpense API
  version: 1.0.0
  description: API documentation for SmartExpense application.

servers:
  - url: http://localhost:8085

paths:
  /api/auth/login:
    post:
      summary: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestDto'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '401':
          description: Invalid credentials

  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDto'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation failed

  /api/categories:
    get:
      summary: Get all categories for the authenticated user
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDto'

    post:
      summary: Create a new category
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'

  /api/categories/{id}:
    get:
      summary: Get category by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '404':
          description: Category not found

    put:
      summary: Update category by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '404':
          description: Category not found

    delete:
      summary: Delete category by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted
        '404':
          description: Category not found

  /api/transactions:
    post:
      summary: Create a new transaction
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequestDto'
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponseDto'

  /api/transactions/{id}:
    get:
      summary: Get transaction by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponseDto'

    put:
      summary: Update a transaction
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequestDto'
      responses:
        '200':
          description: Updated transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponseDto'

    delete:
      summary: Delete a transaction
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content

  /api/transactions/wallet/{walletId}:
    get:
      summary: Get transactions by wallet ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponseDto'

  /api/transactions/wallet/{walletId}/date-range:
    get:
      summary: Get transactions by wallet ID within date range
      security:
        - bearerAuth: [ ]
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            type: integer
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of transactions in date range
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponseDto'

  /api/wallets:
    get:
      summary: Get all wallets for authenticated user
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Wallet list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletDTO'

    post:
      summary: Create wallet
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletDTO'
      responses:
        '201':
          description: Created wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDTO'

  /api/wallets/{id}:
    get:
      summary: Get wallet by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Wallet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDTO'
        '404':
          description: Wallet not found

    put:
      summary: Update wallet
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletDTO'
      responses:
        '200':
          description: Updated wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDTO'
        '404':
          description: Wallet not found

    delete:
      summary: Delete wallet
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Wallet deleted
        '404':
          description: Wallet not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequestDto:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password

    AuthResponseDto:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/UserDto'

    RegisterRequestDto:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string

    UserDto:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string

    WalletDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        balance:
          type: number
        userId:
          type: integer

    TransactionRequestDto:
      type: object
      required:
        - amount
        - date
        - type
        - walletId
      properties:
        amount:
          type: number
          format: double
          minimum: 0
        description:
          type: string
        date:
          type: string
          format: date-time
        type:
          type: string
          enum: [INCOME, EXPENSE]
        walletId:
          type: integer
        categoryId:
          type: integer

    TransactionResponseDto:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
        description:
          type: string
        date:
          type: string
          format: date-time
        type:
          type: string
        walletId:
          type: integer
        walletName:
          type: string
        categoryId:
          type: integer
        categoryName:
          type: string
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time

    CategoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
          description: income or expense
        icon:
          type: string
        color:
          type: string
        userId:
          type: integer
          format: int64
